"""
Самаркина Елeна, группа КИ22-17/2Б, вариант 1.
Для задания цветов используются числа в шестнадцатеричном коде. Цифры
будут следующие: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
(цифры от 10 до 15 заменены латинскими буквами). Числа больше 15 в
шестнадцатеричной системе образуются объединением двух чисел в одно.
Чтобы не возникало путаницы в определении системы счисления, перед
шестнадцатеричным числом ставят символ решетки #, например, #666999.
Необходимо написать две функции:
- первая будет определять, является ли цвет серым;
- вторая будет определять, какие значения необходимо прибавить к каждой
составляющей цвета (красной, синей и зелёной), чтобы он стал серым.
На вход каждая функция получает строку формата «#HHHHHH», где H – любой
символ шестнадцатеричного кода (от 0 до F).
Функции обязательно должны соответствовать определённым сигнатурам,
представленным на листингах 1.1-1.2.
Листинг 1.1 – Сигнатура первой функции
def is_gray (hex: str) -> boolean:
Листинг 1.2 – Сигнатура второй функции
def to_gray (hex: str) -> Tuple[int, int, int]:
Пример: получив на вход строку «#F0F0F0», функция is_gray должна
вернуть True.
"""


def to_gray(str_hex=''):
    """
    определяет сколько нужно добавить красного, зеленого и синего,
    чтобы получить серый цвет. вызывается в случае получения false от
    функции is_gray.
    :param str_hex: параметр функции is_gray(): введенный пользователем
    цветовой код
    :return: кортеж из значений в шестнадцатеричной системе счисления
    """
    red = int(str_hex[1:3], 16)
    green = int(str_hex[3:5], 16)
    blue = int(str_hex[5:-1], 16)
    maximum = max(red, green, blue)
    red = hex(int(maximum - red))[2:]
    green = hex(int(maximum - green))[2:]
    blue = hex(int(maximum - blue))[2:]
    print((red, blue, green))
    return red, blue, green


def is_gray(hex=''):
    # название параметра было изменено, так как вызывало ошибку при
    # вызове функции hex()
    """
    определяет является ли цвет серым
    :param hex: введенный пользователем
    цветовой код
    :return: True/False
    """
    if hex[1] == hex[3] == hex[5] and hex[2] == hex[4] == hex[6]:
        print('True')
        return True
    else:
        print('False')
        to_gray(hex)
        return False


def main():
    """
    меню для пользователя, где можно ввести цветовой код
    :return: -
    """
    while True:
        color = input('Введите код цвета: ')
        if len(color) != 7 or not color.startswith('#'):
            print('Неверно записанный код')
            continue
        for i in list(color)[1:]:
            if i not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                         'A', 'a', 'B', 'b', 'C', 'c',  'D', 'd', 'E', 'e',
                         'F', 'f']:
                print('Неверно записанный код')
                continue

        is_gray(color)
        choice = input('Продолжить работу с другим цветом? [да/нет] ')
        if choice != 'да':
            break


if __name__ == '__main__':
    main()
